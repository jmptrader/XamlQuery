<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XamlQuery</name>
    </assembly>
    <members>
        <member name="T:XamlQuery.XamlQuery">
            <summary>
            Provides methods to find parent and child controls in a rendered Silverlight page.
            </summary>
        </member>
        <member name="M:XamlQuery.XamlQuery.AllParents(System.Windows.DependencyObject)">
            <summary>
            Finds all parents of a control, by traversing the visual tree upwards.
            </summary>
            <param name="control">Dependency object whose parents are found.</param>
            <returns>The ControlSet object containing all the parents from given control to root of the rendered Silverlight page.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ParentsUpto(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds all parents of a control, until the parent with a specified name is found.
            </summary>
            <param name="control">Dependency object whose parents are found.</param>
            <param name="parentName">The name of the parent control where the traversal stops.</param>
            <returns>The ControlSet object containing all the parents found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ParentsUpto``1(System.Windows.DependencyObject)">
            <summary>
            Finds all parents of a control, until a parent of specified type is found.
            </summary>
            <typeparam name="T">The type of parent control where the traversal stops.</typeparam>
            <param name="control">Dependency object whose parents are found.</param>
            <returns>The ControlSet object containing all the parents found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ParentByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the first parent of specified type.
            </summary>
            <typeparam name="T">Type of the parent to be found.</typeparam>
            <param name="control">Dependency object whose parent is found.</param>
            <returns>The parent control found; null if not found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ParentsByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds all parents of specified type.
            </summary>
            <typeparam name="T">Type of the parents to be found.</typeparam>
            <param name="control">Dependency object whose parents are found.</param>
            <returns>The ControlSet object containing all the parents found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ParentByName(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds the first parent with the specified name.
            </summary>
            <param name="control">Dependency object whose parent is found.</param>
            <param name="parentName">Name of the parent to be found.</param>
            <returns>The parent control found; null if not found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.Root(System.Windows.DependencyObject)">
            <summary>
            Finds the root control of the rendered Silverlight page, by traversing the visual tree upwards.
            </summary>
            <param name="control">Dependency object from where the traversing starts.</param>
            <returns>The root control of the rendered Silverlight page. (Always returns the outermost Page/UserControl object. That is, if a Page/UserControl is embedded within another Page/UserControl, the later is returned as root.)</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.All(System.Windows.DependencyObject)">
            <summary>
            Finds all child controls of a given control. The given control need not to be a container control like Panel or Grid. It can be of primitive types also (like ContentControl, Selector), because the rendered Silverlight output can contain any control within any other control (through the use of data-templates and control-templates). For example, there can be a Grid control inside the control-template of a ContentControl.
            </summary>
            <param name="container">Dependency object whose children are found.</param>
            <returns>The ControlSet object containing all the children of the given control.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds all child controls of specified type.
            </summary>
            <typeparam name="T">Type of the children required.</typeparam>
            <param name="container">Dependency object whose children are found.</param>
            <returns>The ControlSet object containing the children found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ByProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Finds all child controls whose property value is equal to a given value.
            </summary>
            <param name="container">Dependency object whose children are found.</param>
            <param name="property">Dependency property whose value is used for finding.</param>
            <param name="value">The required value of the given dependency property. The children whose property value is equal to this value are chosen.</param>
            <returns>The ControlSet object containing the children found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.ByProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object,XamlQuery.FilterType)">
            <summary>
            Finds all child controls whose property value matches a specified criteria. The criteria is defined by the "filterType" parameter. For "Equal" and "NotEqual" filters, the "Equals()" method of the property is used for comparison and for other filters ("StartsWith", "EndsWith", "Contains") the string representation of the property value is used for comparison.
            </summary>
            <param name="container">Dependency object whose children are found.</param>
            <param name="property">Dependency property whose value is used for finding.</param>
            <param name="value">The matching value of the given dependency property. This value is matched with all child controls of the given control.</param>
            <param name="filterType">The filter-type enumeration value that defines the search criteria.</param>
            <returns>The ControlSet object containing the children found.</returns>
        </member>
        <member name="M:XamlQuery.XamlQuery.Search(System.Windows.DependencyObject,System.String)">
            <summary>
            Searches the children of a control using the specified CSS selector query.
            </summary>
            <param name="sourceControl">The control whose visual children are searched. It is important to search in a lesser scope in order to prevent including unwanted controls in search result, because Silverlight introduces many controls dynamically that are not part of the original XAML markup. For example, if you need to search inside a Canvas, pass that Canvas control instead of passing root element (LayoutRoot) as argument.</param>
            <param name="query">The CSS selector query.</param>
            <returns>The ControlSet object containing the matched controls.</returns>
        </member>
        <member name="T:XamlQuery.Speed">
            <summary>
            Provides a list of standard speeds for animation.
            </summary>
        </member>
        <member name="F:XamlQuery.Speed.VerySlow">
            <summary>
            The animation finishes within 3000 milliseconds.
            </summary>
        </member>
        <member name="F:XamlQuery.Speed.Slow">
            <summary>
            The animation finishes within 2000 milliseconds.
            </summary>
        </member>
        <member name="F:XamlQuery.Speed.Normal">
            <summary>
            The animation finishes within 1000 milliseconds.
            </summary>
        </member>
        <member name="F:XamlQuery.Speed.Fast">
            <summary>
            The animation finishes within 500 milliseconds.
            </summary>
        </member>
        <member name="F:XamlQuery.Speed.VeryFast">
            <summary>
            The animation finishes within 200 milliseconds.
            </summary>
        </member>
        <member name="T:XamlQuery.EventType">
            <summary>
            Provides a list of high-level event names, useful for binding and triggering events easily.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.GotFocus">
            <summary>
            Indicates GotFocus event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.LostFocus">
            <summary>
            Indicates LostFocus event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.KeyDown">
            <summary>
            Indicates KeyDown event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.KeyUp">
            <summary>
            Indicates KeyUp event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.MouseEnter">
            <summary>
            Indicates MouseEnter event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.MouseLeave">
            <summary>
            Indicates MouseLeave event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.MouseMove">
            <summary>
            Indicates MouseMove event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.LostMouseCapture">
            <summary>
            Indicates LostMouseCapture event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.MouseLeftButtonDown">
            <summary>
            Indicates MouseLeftButtonDown event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.MouseLeftButtonUp">
            <summary>
            Indicates MouseLeftButtonUp event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.MouseWheel">
            <summary>
            Indicates MouseWheel event of System.Windows.UIElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.BindingValidationError">
            <summary>
            Indicates BindingValidationError event of System.Windows.FrameworkElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.Loaded">
            <summary>
            Indicates Loaded event of System.Windows.FrameworkElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.LayoutUpdated">
            <summary>
            Indicates LayoutUpdated event of System.Windows.FrameworkElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.SizeChanged">
            <summary>
            Indicates SizeChanged event of System.Windows.FrameworkElement.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.IsEnabledChanged">
            <summary>
            Indicates IsEnabledChanged event of System.Windows.Controls.Control.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.TextChanged">
            <summary>
            Indicates TextChanged event of System.Windows.Controls.TextBox.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.TextSelectionChanged">
            <summary>
            Indicates TextSelectionChanged event of System.Windows.Controls.TextBox.
            </summary>
        </member>
        <member name="F:XamlQuery.EventType.SelectionChanged">
            <summary>
            Indicates SelectionChanged event of System.Windows.Controls.Primitives.Selector.
            </summary>
        </member>
        <member name="T:XamlQuery.FilterType">
            <summary>
            Represents the type of matching a specified property's value (while choosing a set of controls).
            </summary>
        </member>
        <member name="F:XamlQuery.FilterType.Equals">
            <summary>
            Controls whose property value is equal to specified value are chosen. The Equals() method of corresponding property is used for checking the equality.
            </summary>
        </member>
        <member name="F:XamlQuery.FilterType.NotEquals">
            <summary>
            Controls whose property value is not equal to specified value are chosen. The Equals() method of corresponding property is used for checking the equality.
            </summary>
        </member>
        <member name="F:XamlQuery.FilterType.StartsWith">
            <summary>
            Controls whose property value starts with a specified value are chosen. The ToString() method of corresponding property is used for matching.
            </summary>
        </member>
        <member name="F:XamlQuery.FilterType.EndsWith">
            <summary>
            Controls whose property value ends with a specified value are chosen. The ToString() method of corresponding property is used for matching.
            </summary>
        </member>
        <member name="F:XamlQuery.FilterType.Contains">
            <summary>
            Controls whose property value contains a specified value are chosen. The ToString() method of corresponding property is used for matching.
            </summary>
        </member>
        <member name="F:XamlQuery.XamlSelector.Parser.AllCharacters">
            <summary>
            List of valid characters supported by XamlSelector query string.
            
            a-z FOR alphabets for identifier, property name and value
            A-Z FOR alphabets for identifier, property name and value
            0-9 FOR numbers for identifier, property name and value
            , FOR selector delimiter
            * FOR universal selector
            . FOR class/style selector
            # FOR name selector
            > FOR child selector (combinator)
            + FOR adjacent selector (combinator)
            [ FOR property selector
            ] FOR property selector
            _ FOR property selector (delimiter b/w control name and property name, applies to dependency properties)
            = FOR property selector (equals)
            ! FOR property selector (not-equals)
            ^ FOR property selector (starts-with)
            $ FOR property selector (ends-with)
            ~ FOR property selector (contains-within-string)
            space FOR combinator
            \n FOR combinator
            \r FOR combinator
            \t FOR combinator
            
            Future:
                Symbols for pseudo-classes
                    _, (, ), -
            </summary>
        </member>
        <member name="T:XamlQuery.ControlSet">
            <summary>
            ControlSet class is used to hold the set of controls returned by XamlQuery.
            ControlSet provides numerous helper methods to carry out a complex task very easily.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.FilterByType``1">
            <summary>
            Finds controls of specified type.
            </summary>
            <typeparam name="T">The required type of controls.</typeparam>
            <returns>ControlSet containing the matched controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.FilterByTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            Finds controls whose type is any one of specified types.
            </summary>
            <param name="types">The list of required types of controls.</param>
            <returns>ControlSet containing the matched controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.FilterByProperty(System.Windows.DependencyProperty,System.Object)">
            <summary>
            Finds controls whose property value is equal to a given value.
            </summary>
            <param name="property">Dependency property whose value is used for matching.</param>
            <param name="value">The required value of the given dependency property. The controls whose property value is equal to this value are chosen.</param>
            <returns>ControlSet containing the matched controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.FilterByProperty(System.Windows.DependencyProperty,System.Object,XamlQuery.FilterType)">
            <summary>
            Finds controls whose property value matches a specified criteria. The criteria is defined by the "filterType" parameter. For "Equal" and "NotEqual" filters, the "Equals()" method of the property is used for comparison and for other filters ("StartsWith", "EndsWith", "Contains") the string representation of the property value is used for comparison.
            </summary>
            <param name="property">Dependency property whose value is used for matching.</param>
            <param name="value">The matching value of the given dependency property. This value is matched with all controls in the ControlSet.</param>
            <param name="filterType">The filter-type enumeration value that defines the search criteria.</param>
            <returns>ControlSet containing the matched controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Not(XamlQuery.ControlSet)">
            <summary>
            Removes the given list of controls and returns the resultant ControlSet.
            </summary>
            <param name="controlSet">The ControlSet containing the controls to be removed.</param>
            <returns>ControlSet after removing the specified controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.RemoveByType``1">
            <summary>
            Removes controls of specified type from the ControlSet.
            </summary>
            <typeparam name="T">The type of the controls to be removed.</typeparam>
            <returns>Returns the removed controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.RemoveByTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            Removes the controls whose type is any one of specified types.
            </summary>
            <param name="types">The list of control types to be removed.</param>
            <returns>Returns the removed controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Even">
            <summary>
            Gets the controls at even indices. Since index is zero-based, it returns first-control, third-control, and so on.
            </summary>
            <returns>ControlSet containing the controls at even indices.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Odd">
            <summary>
            Gets the controls at odd indices. Since index is zero-based, it returns second-control, fourth-control, and so on.
            </summary>
            <returns>ControlSet containing the controls at odd indices.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Gt(System.Int32)">
            <summary>
            Gets the controls at index greater than the specified index. The index is zero-based and so it returns (i+1)'th element to (n-1)'th element, where i is index and n is number-of-controls. The i'th element is not included in the resultant ControlSet.
            </summary>
            <param name="index">The zero-based reference index.</param>
            <returns>ControlSet containing the controls in the range defined by index.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Lt(System.Int32)">
            <summary>
            Gets the controls at index lesser than the specified index. The index is zero-based and so it returns 0'th element to (i-1)'th element, where i is the index. The i'th element is not included in the resultant ControlSet.
            </summary>
            <param name="index">The zero-based reference index.</param>
            <returns>ControlSet containing the controls in the range defined by index.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Enabled">
            <summary>
            Finds controls that are enabled in the user-interface (checks IsEnabled property of dependency objects extended from System.Windows.Controls.Control).
            </summary>
            <returns>ControlSet containing the enabled controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Disabled">
            <summary>
            Finds controls that are disabled in the user-interface (checks IsEnabled property of dependency objects extended from System.Windows.Controls.Control).
            </summary>
            <returns>ControlSet containing the disabled controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Visible">
            <summary>
            Finds controls that are visible in the user-interface (checks Visibility property of dependency objects extended from System.Windows.UIElement).
            </summary>
            <returns>ControlSet containing the visible controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Invisible">
            <summary>
            Finds controls that are invisible in the user-interface (checks Visibility property of dependency objects extended from System.Windows.UIElement).
            </summary>
            <returns>ControlSet containing the invisible controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Checked">
            <summary>
            Finds controls that are marked as checked in the user-interface (checks IsChecked property of dependency objects extended from System.Windows.Controls.Primitives.ToggleButton).
            </summary>
            <returns>ControlSet containing the checked controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Unchecked">
            <summary>
            Finds controls that are not marked as checked in the user-interface (checks IsChecked property of dependency objects extended from System.Windows.Controls.Primitives.ToggleButton).
            </summary>
            <returns>ControlSet containing the unchecked controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.SetValue(System.Windows.DependencyProperty,System.Object)">
            <summary>
            Sets a value to specified-property of all controls.
            </summary>
            <param name="property">The destination property to which the value is assigned.</param>
            <param name="value">The value to be assigned to specified dependency property.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.GetValue(System.Windows.DependencyProperty)">
            <summary>
            Gets value of specified-property of all controls. The values of all controls are returned as a List object.
            </summary>
            <param name="property">Dependency property whose value is fetched.</param>
            <returns>A List object containing the specified property's value of all controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.Binding)">
            <summary>
            Attaches a binding to specified-property of all controls.
            </summary>
            <param name="property">The destination property where the binding is established.</param>
            <param name="binding">The binding object to be attached.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.ClearValue(System.Windows.DependencyProperty)">
            <summary>
            Clears the local value of a property of all controls.
            </summary>
            <param name="property">Dependency property whose value is cleared.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Val">
            <summary>
            Gets the current value of first control. For TextBlock and TextBox, it returns value of Text property; for Selector controls (like ListBox, ComboBox), it returns value of SelectedItem property.
            </summary>
            <returns>The current value of first control (according to the control type).</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Data(System.String,System.Object)">
            <summary>
            Attaches any arbitrary object to all controls. Any number of objects can be attached and each object is represented by a key. XamlQuery maintains an internal dependency-object store where these objects are stored. This is similar to having multiple Tag properties for a Silverlight control.
            </summary>
            <param name="key">A string key that uniquely identifies an object attached using this method.</param>
            <param name="value">The arbitrary object of any type which will be attached to all controls.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Data(System.String)">
            <summary>
            Gets the arbitrary objects from dependency-object store identified by the given key.
            </summary>
            <param name="key">The string key that identifies the objects to be retrieved from the store.</param>
            <returns>A List containing the arbitrary objects attached to all controls.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Hide">
            <summary>
            Hides the controls (without animation). The Visibility property will be set to Collapsed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.Show">
            <summary>
            Displays the controls (without animation). The Visibility property is will be set to Visible.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.Toggle">
            <summary>
            Alternates the visibility of controls (without animation). The Visibility property is swapped between Collapsed and Visible.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeOut">
            <summary>
            Hides the conrols by fading them to transparent. The fading process is animated in 'Normal' speed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeOut(XamlQuery.Speed)">
            <summary>
            Hides the controls by fading them to transparent. The fading process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for fading animation).</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeOut(System.Int32)">
            <summary>
            Hides the controls by fading them to transparent. The fading process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the fading animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeIn">
            <summary>
            Displays the controls by fading them to opaque. The fading process is animated in 'Normal' speed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeIn(XamlQuery.Speed)">
            <summary>
            Displays the controls by fading them to opaque. The fading process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for fading animation).</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeIn(System.Int32)">
            <summary>
            Displays the controls by fading them to opaque. The fading process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the fading animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeTo(System.Double)">
            <summary>
            Sets transparency (opacity) level to specified value. The fading process is animated in 'Normal' speed.
            </summary>
            <param name="targetOpacity">Required level of transparency between 0.0 and 1.0.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeTo(XamlQuery.Speed,System.Double)">
            <summary>
            Sets transparency (opacity) level to specified value. The fading process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for fading animation).</param>
            <param name="targetOpacity">Required level of transparency between 0.0 and 1.0.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeTo(System.Int32,System.Double)">
            <summary>
            Sets transparency (opacity) level to specified value. The fading process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the fading animation.</param>
            <param name="targetOpacity">Required level of transparency between 0.0 and 1.0.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeToggle">
            <summary>
            Alternates the visibility of controls between transparent and opaque. The fading process is animated in 'Normal' speed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeToggle(XamlQuery.Speed)">
            <summary>
            Alternates the visibility of controls between transparent and opaque. The fading process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for fading animation).</param>
        </member>
        <member name="M:XamlQuery.ControlSet.FadeToggle(System.Int32)">
            <summary>
            Alternates the visibility of controls between transparent and opaque. The fading process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the fading animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideUp">
            <summary>
            Hides the controls by gradually decreasing the height. The sliding process is animated in 'Normal' speed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideUp(XamlQuery.Speed)">
            <summary>
            Hides the controls by gradually decreasing the height. The sliding process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for sliding animation).</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideUp(System.Int32)">
            <summary>
            Hides the controls by gradually decreasing the height. The sliding process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the sliding animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideDown">
            <summary>
            Displays the controls by gradually increasing the height to original height before sliding up. The sliding process is animated in 'Normal' speed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideDown(XamlQuery.Speed)">
            <summary>
            Displays the controls by gradually increasing the height to original height before sliding up. The sliding process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for sliding animation).</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideDown(System.Int32)">
            <summary>
            Displays the controls by gradually increasing the height to original height before sliding up. The sliding process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the sliding animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideTo(System.Double)">
            <summary>
            Sets the height of controls to a specified value. The sliding process in animated in 'Normal' speed.
            </summary>
            <param name="targetHeight">The required height.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideTo(XamlQuery.Speed,System.Double)">
            <summary>
            Sets the height of controls to a specified value. The sliding process in animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for sliding animation).</param>
            <param name="targetHeight">The required height.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideTo(System.Int32,System.Double)">
            <summary>
            Sets the height of controls to a specified value. The sliding process in animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the sliding animation.</param>
            <param name="targetHeight">The required height.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideToggle">
            <summary>
            Alternates the height of controls between zero and original height (before sliding up). The sliding process is animated in 'Normal' speed.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideToggle(XamlQuery.Speed)">
            <summary>
            Alternates the height of controls between zero and original height (before sliding up). The sliding process is animated in a specified speed.
            </summary>
            <param name="speed">Any one of 'Speed' enumeration constants (for sliding animation).</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SlideToggle(System.Int32)">
            <summary>
            Alternates the height of controls between zero and original height (before sliding up). The sliding process is animated in a specified speed.
            </summary>
            <param name="duration">Duration (in milliseconds) for the sliding animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Animate(System.Windows.DependencyProperty,System.Int32,System.Double,System.Double)">
            <summary>
            Performs a custom animation on the specified property of all controls in the ControlSet. The duration of animation and begin/end property values can be set via parameters.
            </summary>
            <param name="property">Dependency property whose value changes gradually during animation.</param>
            <param name="duration">Duration (in milliseconds) for the animation.</param>
            <param name="from">Begin value of property when the animation starts.</param>
            <param name="to">End value of property when the animation ends.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Animate(System.Windows.DependencyProperty,System.Int32,System.Double,System.Double,System.EventHandler)">
            <summary>
            Performs a custom animation on the specified property of all controls in the ControlSet. The duration of animation and begin/end property values can be set via parameters.
            </summary>
            <param name="property">Dependency property whose value changes gradually during animation.</param>
            <param name="duration">Duration (in milliseconds) for the animation.</param>
            <param name="from">Begin value of property when the animation starts.</param>
            <param name="to">End value of property when the animation ends.</param>
            <param name="callback">The method to be invoked after the animation.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.AddHandler(System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            Attaches an event handler delegate/method to specified routed-event of all controls in the ControlSet.
            </summary>
            <param name="routedEvent">The routed event to be handled.</param>
            <param name="handler">The event-handler method which is invoked when the event occurs.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)">
            <summary>
            Attaches an event handler delegate/method to specified routed-event of all controls in the ControlSet.
            </summary>
            <param name="routedEvent">The routed event to be handled.</param>
            <param name="handler">The event-handler method which is invoked when the event occurs.</param>
            <param name="handledEventsToo">Boolean that indicates whether to rehandle the event even if it is marked handled.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            Removes the specified routed event handler from all controls in the ControlSet.
            </summary>
            <param name="routedEvent">The routed event for which the handler is attached.</param>
            <param name="handler">The event handler to be removed.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Bind(XamlQuery.EventType,System.Delegate)">
            <summary>
            Attaches an event-handler to the event specified by EventType enumeration. Events attached using this method, can be invoked/fired manually without the actual event occurs.
            </summary>
            <param name="eventType">Any one of EventType enumeration constants, that indicates the event to be handled.</param>
            <param name="handler">The event-handler method which is invoked when the event occurs or manually fired. The signature of the event-handler method should match the event. For example, a mouse event handler cannot be attached to a keyboard event.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Trigger(XamlQuery.EventType)">
            <summary>
            Fires the event. This method manually invokes the event-handler method without the actual event occurs.
            </summary>
            <param name="eventType">Any one of EventType enumeration constants, that indicates the event to be fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.GotFocus">
            <summary>
            Fires the GotFocus event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.GotFocus(System.Delegate)">
            <summary>
            Attaches an event-handler to GotFocus event.
            </summary>
            <param name="handler">The event-handler method which is invoked when GotFocus event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.LostFocus">
            <summary>
            Fires the LostFocus event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.LostFocus(System.Delegate)">
            <summary>
            Attaches an event-handler to LostFocus event.
            </summary>
            <param name="handler">The event-handler method which is invoked when LostFocus event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.KeyDown">
            <summary>
            Fires the KeyDown event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.KeyDown(System.Delegate)">
            <summary>
            Attaches an event-handler to KeyDown event.
            </summary>
            <param name="handler">The event-handler method which is invoked when KeyDown event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.KeyUp">
            <summary>
            Fires the KeyUp event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.KeyUp(System.Delegate)">
            <summary>
            Attaches an event-handler to KeyUp event.
            </summary>
            <param name="handler">The event-handler method which is invoked when KeyUp event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseEnter">
            <summary>
            Fires the MouseEnter event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseEnter(System.Delegate)">
            <summary>
            Attaches an event-handler to MouseEnter event.
            </summary>
            <param name="handler">The event-handler method which is invoked when MouseEnter event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseLeave">
            <summary>
            Fires the MouseLeave event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseLeave(System.Delegate)">
            <summary>
            Attaches an event-handler to MouseLeave event.
            </summary>
            <param name="handler">The event-handler method which is invoked when MouseLeave event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseMove">
            <summary>
            Fires the MouseMove event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseMove(System.Delegate)">
            <summary>
            Attaches an event-handler to MouseMove event.
            </summary>
            <param name="handler">The event-handler method which is invoked when MouseMove event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.LostMouseCapture">
            <summary>
            Fires the LostMouseCapture event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.LostMouseCapture(System.Delegate)">
            <summary>
            Attaches an event-handler to LostMouseCapture event.
            </summary>
            <param name="handler">The event-handler method which is invoked when LostMouseCapture event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseLeftButtonDown">
            <summary>
            Fires the MouseLeftButtonDown event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseLeftButtonDown(System.Delegate)">
            <summary>
            Attaches an event-handler to MouseLeftButtonDown event.
            </summary>
            <param name="handler">The event-handler method which is invoked when MouseLeftButtonDown event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseLeftButtonUp">
            <summary>
            Fires the MouseLeftButtonUp event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseLeftButtonUp(System.Delegate)">
            <summary>
            Attaches an event-handler to MouseLeftButtonUp event.
            </summary>
            <param name="handler">The event-handler method which is invoked when MouseLeftButtonUp event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseWheel">
            <summary>
            Fires the MouseWheel event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.MouseWheel(System.Delegate)">
            <summary>
            Attaches an event-handler to MouseWheel event.
            </summary>
            <param name="handler">The event-handler method which is invoked when MouseWheel event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.BindingValidationError">
            <summary>
            Fires the BindingValidationError event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.BindingValidationError(System.Delegate)">
            <summary>
            Attaches an event-handler to BindingValidationError event.
            </summary>
            <param name="handler">The event-handler method which is invoked when BindingValidationError event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Loaded">
            <summary>
            Fires the Loaded event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.Loaded(System.Delegate)">
            <summary>
            Attaches an event-handler to Loaded event.
            </summary>
            <param name="handler">The event-handler method which is invoked when Loaded event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.LayoutUpdated">
            <summary>
            Fires the LayoutUpdated event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.LayoutUpdated(System.Delegate)">
            <summary>
            Attaches an event-handler to LayoutUpdated event.
            </summary>
            <param name="handler">The event-handler method which is invoked when LayoutUpdated event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SizeChanged">
            <summary>
            Fires the SizeChanged event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.SizeChanged(System.Delegate)">
            <summary>
            Attaches an event-handler to SizeChanged event.
            </summary>
            <param name="handler">The event-handler method which is invoked when SizeChanged event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.IsEnabledChanged">
            <summary>
            Fires the IsEnabledChanged event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.IsEnabledChanged(System.Delegate)">
            <summary>
            Attaches an event-handler to IsEnabledChanged event.
            </summary>
            <param name="handler">The event-handler method which is invoked when IsEnabledChanged event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.TextChanged">
            <summary>
            Fires the TextChanged event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.TextChanged(System.Delegate)">
            <summary>
            Attaches an event-handler to TextChanged event.
            </summary>
            <param name="handler">The event-handler method which is invoked when TextChanged event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.TextSelectionChanged">
            <summary>
            Fires the TextSelectionChanged event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.TextSelectionChanged(System.Delegate)">
            <summary>
            Attaches an event-handler to TextSelectionChanged event.
            </summary>
            <param name="handler">The event-handler method which is invoked when TextSelectionChanged event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.SelectionChanged">
            <summary>
            Fires the SelectionChanged event.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.SelectionChanged(System.Delegate)">
            <summary>
            Attaches an event-handler to SelectionChanged event.
            </summary>
            <param name="handler">The event-handler method which is invoked when SelectionChanged event occurs or manually fired.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Detach">
            <summary>
            Detaches/removes/deletes all the controls from the rendered Silverlight output. Controls which are direct children of container controls (like Panel, Grid, StackPanel, WrapPanel, etc) can be detached.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.DetachByType``1">
            <summary>
            Detaches/deletes/removes the controls of specified type from the rendered Silverlight output. Controls which are direct children of container controls (like Panel, Grid, StackPanel, WrapPanel, etc) can be detached.
            </summary>
            <typeparam name="T">Type of the controls to be detached.</typeparam>
        </member>
        <member name="M:XamlQuery.ControlSet.DetachByTypes(System.Collections.Generic.List{System.Type})">
            <summary>
            Detaches/deletes/removes the controls of specified types from the rendered Silverlight output. Controls which are direct children of container controls (like Panel, Grid, StackPanel, WrapPanel, etc) can be detached.
            </summary>
            <param name="types">List of types of the controls to be detached.</param>
        </member>
        <member name="M:XamlQuery.ControlSet.Empty">
            <summary>
            Removes all the children of all container controls in the ControlSet. The container controls are those that are extended from Panel class.
            </summary>
        </member>
        <member name="M:XamlQuery.ControlSet.Width">
            <summary>
            Returns the actual width of first control in the ControlSet. Controls extended from FrameworkElement has a width associated with it.
            </summary>
            <returns>Actual width of the first control; -1 if the first control is not a FrameworkElement.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Height">
            <summary>
            Returns the actual height of first control in the ControlSet. Controls extended from FrameworkElement has a height associated with it.
            </summary>
            <returns>Actual height of the first control; -1 if the first control is not a FrameworkElement.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Position">
            <summary>
            Returns the Position of first control in the ControlSet. The position is calculated with reference to its immediate parent.
            </summary>
            <returns>Position of the first control with reference to its immediate parent; default value of Point if the first control has no parent.</returns>
        </member>
        <member name="M:XamlQuery.ControlSet.Create(System.Windows.DependencyObject)">
            <summary>
            Creates a new ControlSet with a single control. This method will be useful when methods of ControlSet needs to be accessed for a single control. This will be particularly useful inside ForEach(Action&lt;&gt;) method of ControlSet (similar to jQuery's 'this' behavior inside foreach loop).
            </summary>
            <param name="control">Dependency object which will be added to the new ControlSet.</param>
            <returns>The new ControlSet object created.</returns>
        </member>
    </members>
</doc>
